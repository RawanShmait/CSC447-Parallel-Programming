%%writefile bs_pthreads.c

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>

#define ARRAY_SIZE 100
#define NUM_BUCKETS 10
#define MAX_VALUE 100
#define MIN(a,b) (((a)<(b))?(a):(b))

typedef struct
{
    int* array;
    int size;
    int capacity;
} Bucket;

typedef struct
{
    int* array;
    Bucket* buckets;
    int start;
    int end;
} Data;

int compare(const void* a, const void* b)
{
    return (*(int*)a - *(int*)b);
}

void initBucket(Bucket* bucket)
{
    bucket->capacity = 10;
    bucket->size = 0;
    bucket->array = (int*)malloc(bucket->capacity * sizeof(int));
    if (!bucket->array)
    {
        fprintf(stderr, "Memory allocation failed\n");
        exit(1);
    }
}

void addToBucket(Bucket* bucket, int value)
{
    if (bucket->size >= bucket->capacity)
    {
        bucket->capacity *= 2;
        bucket->array = (int*)realloc(bucket->array, bucket->capacity * sizeof(int));
        if (!bucket->array)
        {
            fprintf(stderr, "Memory allocation failed\n");
            exit(1);
        }
    }
    bucket->array[bucket->size++] = value;
}

void* distributeToBuckets(void* arg)
{
    Data* data = (Data*)arg;
    for (int i = data->start; i < data->end; i++)
    {
        int value = data->array[i];
        int bucketIdx = value / (MAX_VALUE / NUM_BUCKETS);
        addToBucket(&data->buckets[bucketIdx], value);
    }
    pthread_exit(NULL);
}

void* sortBuckets(void* arg)
{
    Bucket* bucket = (Bucket*)arg;
    qsort(bucket->array, bucket->size, sizeof(int), compare);
    pthread_exit(NULL);
}

int main()
{
    int array[ARRAY_SIZE];
    Bucket buckets[NUM_BUCKETS];
    pthread_t threads[NUM_BUCKETS];
    Data threadData[NUM_BUCKETS];

    srand(time(NULL));
    for (int i = 0; i < ARRAY_SIZE; i++)
        array[i] = rand() % MAX_VALUE;

    for (int i = 0; i < NUM_BUCKETS; i++)
        initBucket(&buckets[i]);

    for (int i = 0; i < NUM_BUCKETS; i++)
    {
        threadData[i].array = array;
        threadData[i].buckets = buckets;
        threadData[i].start = i * (ARRAY_SIZE / NUM_BUCKETS);
        threadData[i].end = MIN((i + 1) * (ARRAY_SIZE / NUM_BUCKETS), ARRAY_SIZE);
        pthread_create(&threads[i], NULL, distributeToBuckets, (void*)&threadData[i]);
    }

    for (int i = 0; i < NUM_BUCKETS; i++)
        pthread_join(threads[i], NULL);
    
    for (int i = 0; i < NUM_BUCKETS; i++)
        pthread_create(&threads[i], NULL, sortBuckets, (void*)&buckets[i]);

    for (int i = 0; i < NUM_BUCKETS; i++)
        pthread_join(threads[i], NULL);

    for (int i = 0; i < NUM_BUCKETS; i++)
    {
        for (int j = 0; j < buckets[i].size; j++)
            printf("%d ", buckets[i].array[j]);
    }
    printf("\n");

    for (int i = 0; i < NUM_BUCKETS; ++i)
        free(buckets[i].array);

    return 0;
}
